components:
  schemas:
    BrandResponse:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated id of the brand
        brandName:
          type: string
          description: The unique name of the brand
        storyDescription:
          type: string
          description: Brand description/story
        imageURL:
          type: string
          description: URL to the brand's logo
        email:
          type: string
          description: Brand's contact email
        phoneNumbers:
          type: array
          items:
            type: string
          description: Contact phone numbers
        industry:
          type: string
          description: Industry the brand belongs to
        rating:
          type: number
          description: Brand rating
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
          description: Brand's physical addresses
        websites:
          type: array
          items:
            $ref: "#/components/schemas/Website"
          description: Brand's websites
        brandOwnerId:
          type: string
          description: ID of the brand owner (denormalized for authorization)
        subscription:
          $ref: "#/components/schemas/Subscription"
          description: Brand's subscription details
        productCount:
          type: integer
          description: Denormalized count of products for quota checks
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"

    Website:
      type: object
      properties:
        type:
          type: string
          description: Type of website (e.g., official, social, blog)
        url:
          type: string
          description: Website URL

    Subscription:
      type: object
      properties:
        plan:
          type: string
          enum: [FREE, BASIC, PREMIUM]
          description: Subscription plan name
        price:
          type: number
          description: Subscription price
        startDate:
          $ref: "#/components/schemas/Timestamp"
          description: Subscription start date
        endDate:
          $ref: "#/components/schemas/Timestamp"
          description: Subscription end date

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    SubscriptionPlanDetails:
      type: object
      properties:
        plan:
          type: integer
          enum: [1, 2, 3]
          description: Subscription plan enum value (1=FREE, 2=BASIC, 3=PREMIUM)
        name:
          type: string
        price:
          type: number
        features:
          type: array
          items:
            type: string
        productLimit:
          type: integer

# Defining Paths
paths:
  /brands:
    get:
      summary: Retrieve all brands with pagination
      tags: [Brands]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
      responses:
        200:
          description: A list of brands
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BrandResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brands/{id}:
    get:
      summary: Retrieve a brand by ID
      tags: [Brands]
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the brand
          schema:
            type: string
      responses:
        200:
          description: Brand data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/BrandResponse"
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brands/me:
    get:
      summary: Retrieve the authenticated user's brand
      tags: [Brands]
      responses:
        200:
          description: Brand data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/BrandResponse"
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update the authenticated user's brand
      tags: [Brands]
      requestBody:
        description: You can only provide the fields you want to update
        content:
          application/json:
            schema:
              type: object
              properties:
                brandName:
                  type: string
                  description: The unique name of the brand
                storyDescription:
                  type: string
                  description: Brand description/story
                imageURL:
                  type: string
                  description: URL to the brand's logo
                email:
                  type: string
                  description: Brand's contact email
                phoneNumbers:
                  type: array
                  items:
                    type: string
                  description: Contact phone numbers
                industry:
                  type: string
                  description: Industry the brand belongs to
                addresses:
                  type: array
                  items:
                    $ref: "#/components/schemas/Address"
                  description: Brand's physical addresses
                websites:
                  type: array
                  items:
                    $ref: "#/components/schemas/Website"
                  description: Brand's websites
      responses:
        200:
          description: The brand was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Failed to update brand due to invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brands/me/upgrade-subscription:
    post:
      summary: Upgrade a brand's subscription plan (admin only)
      tags: [Brands]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPlan
              properties:
                newPlan:
                  type: integer
                  enum: [1, 2, 3]
                  description: Subscription plan enum value (1=FREE, 2=BASIC, 3=PREMIUM)
      responses:
        200:
          description: Subscription upgraded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Invalid input or plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /brands/subscription-plans:
    get:
      summary: Get all available subscription plans
      tags: [Brands]
      description: Returns all available subscription plans and their details for brand owners to choose from.
      responses:
        200:
          description: A list of all subscription plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubscriptionPlanDetails'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
