components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT Bearer token
  schemas:
    BrandResponse:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated id of the brand
        brandName:
          type: string
          description: The unique name of the brand
        storyDescription:
          type: string
          description: Brand description/story
        imageURL:
          type: string
          description: URL to the brand's logo
        email:
          type: string
          description: Brand's contact email
        phoneNumbers:
          type: array
          items:
            type: string
          description: Contact phone numbers
        industry:
          type: string
          description: Industry the brand belongs to
        rating:
          type: number
          description: Brand rating
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Brand's physical addresses
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
          description: Brand's websites
        owner:
          type: object
          properties:
            id:
              type: string
              description: Brand owner reference ID
            path:
              type: string
              description: Firestore reference path to the brand owner
        brandOwnerId:
          type: string
          description: ID of the brand owner (denormalized for authorization)
        productIds:
          type: array
          items:
            type: string
          description: IDs of products associated with this brand (denormalized for querying)
        subscription:
          $ref: '#/components/schemas/Subscription'
          description: Brand's subscription details

    BrandRequest:
      type: object
      required:
        - brandName
        - storyDescription
      properties:
        brandName:
          type: string
          description: The unique name of the brand
        storyDescription:
          type: string
          description: Brand description/story
        imageURL:
          type: string
          description: URL to the brand's logo
        email:
          type: string
          description: Brand's contact email
        phoneNumbers:
          type: array
          items:
            type: string
          description: Contact phone numbers
        industry:
          type: string
          description: Industry the brand belongs to
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Brand's physical addresses
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
          description: Brand's websites
        productIds:
          type: array
          items:
            type: string
          description: IDs of products associated with this brand (denormalized for querying)
        subscription:
          $ref: '#/components/schemas/Subscription'
          description: Brand's subscription details

    Address:
      type: object
      properties:
        building:
          type: number
          description: Building number
        city:
          type: string
          description: City name
        postalCode:
          type: number
          description: Postal code
        street:
          type: string
          description: Street name

    Website:
      type: object
      properties:
        type:
          type: string
          description: Type of website (e.g., official, social, blog)
        url:
          type: string
          description: Website URL

    Subscription:
      type: object
      properties:
        plan:
          type: string
          description: Subscription plan name
        price:
          type: number
          description: Subscription price
        startDate:
          type: string
          format: date-time
          description: Subscription start date
        endDate:
          type: string
          format: date-time
          description: Subscription end date

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

# Defining Paths
paths:
  /brands:
    get:
      summary: Retrieve all brands
      tags: [Brands]
      responses:
        200:
          description: A list of brands
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BrandResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /brands/{id}:
    get:
      summary: Retrieve a brand by ID
      tags: [Brands]
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the brand
          schema:
            type: string
      responses:
        200:
          description: Brand data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/BrandResponse'
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a brand
      tags: [Brands]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the brand
          schema:
            type: string
      requestBody:
        description: You can only provide the fields you want to update
        content:
          application/json:
            schema:
              type: object
              properties:
                brandName:
                  type: string
                  description: The unique name of the brand
                storyDescription:
                  type: string
                  description: Brand description/story
                imageURL:
                  type: string
                  description: URL to the brand's logo
                email:
                  type: string
                  description: Brand's contact email
                phoneNumbers:
                  type: array
                  items:
                    type: string
                  description: Contact phone numbers
                industry:
                  type: string
                  description: Industry the brand belongs to
                addresses:
                  type: array
                  items:
                    $ref: '#/components/schemas/Address'
                  description: Brand's physical addresses
                websites:
                  type: array
                  items:
                    $ref: '#/components/schemas/Website'
                  description: Brand's websites
                subscription:
                  $ref: '#/components/schemas/Subscription'
                  description: Brand's subscription details
      responses:
        200:
          description: The brand was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Failed to update brand due to invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /brands/name:
    get:
      summary: Retrieve a brand by name
      tags: [Brands]
      parameters:
        - in: query
          name: name
          required: true
          description: The name of the brand
          schema:
            type: string
      responses:
        200:
          description: Brand data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/BrandResponse'
        404:
          description: Brand not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'