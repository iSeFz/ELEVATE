components:
  schemas:
    ProductRequest:
      type: object
      required:
        - name
        - description
        - material
        - category
        - department
        - variants
      properties:
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        material:
          type: string
          description: Material of the product
        category:
          type: string
          description: Category of the product
        department:
          type: array
          items:
            type: string
          description: Departments the product belongs to
        variants:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariantRequest"
          description: Variants of the product

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        material:
          type: string
          description: Material of the product
        category:
          type: string
          description: Category of the product
        department:
          type: array
          items:
            type: string
          description: Departments the product belongs to
        brandId:
          type: string
          description: ID of the brand
        brandOwnerId:
          type: string
          description: ID of the brand owner
        brandName:
          type: string
          description: Name of the brand
        subscription:
          $ref: "#/components/schemas/Subscription"
          description: Brand's subscription details
        brandSubscriptionPlan:
          type: string
          enum: [FREE, BASIC, PREMIUM]
          description: The current subscription plan of the brand at the time of product creation. Used for prioritization.
        variants:
          type: array
          items:
            $ref: "#/components/schemas/ProductVariantEmbedded"
          description: Variants of the product
        reviewSummary:
          $ref: "#/components/schemas/ProductReviewSummary"
          description: Summary of product reviews
        createdAt:
          $ref: "#/components/schemas/Timestamp"
          description: Timestamp when the product was created
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
          description: Timestamp when the product was last updated

    ProductVariantRequest:
      type: object
      required:
        - colors
        - discount
        - images
        - price
        - size
        - stock
      properties:
        colors:
          type: array
          items:
            type: string
          description: Available colors for this variant
        discount:
          type: number
          description: Discount percentage for this variant
        images:
          type: array
          items:
            type: string
          description: URLs of images for this variant
        price:
          type: number
          format: float
          description: Price of this variant
        size:
          type: string
          description: Size of the variant (e.g., S, M, L)
        stock:
          type: integer
          description: Quantity in stock for this variant

    ProductVariantEmbedded:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the variant
        colors:
          type: array
          items:
            type: string
          description: Available colors for this variant
        discount:
          type: number
          description: Discount percentage for this variant
        images:
          type: array
          items:
            type: string
          description: URLs of images for this variant
        price:
          type: number
          format: float
          description: Price of this variant
        size:
          type: string
          description: Size of the variant (e.g., S, M, L)
        stock:
          type: integer
          description: Quantity in stock for this variant

    ProductReviewSummary:
      type: object
      properties:
        averageRating:
          type: number
          format: float
          description: Average rating of the product
        totalReviews:
          type: integer
          description: Total number of reviews for the product
        ratingDistribution:
          type: object
          properties:
            "1":
              type: integer
              description: Number of 1-star ratings
            "2":
              type: integer
              description: Number of 2-star ratings
            "3":
              type: integer
              description: Number of 3-star ratings
            "4":
              type: integer
              description: Number of 4-star ratings
            "5":
              type: integer
              description: Number of 5-star ratings

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
paths:
  /products:
    get:
      summary: Retrieve all products
      tags: [Products]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination, default is 1, page size is 10
        - in: query
          name: category
          schema:
            type: string
          description: Filter by product category
        - in: query
          name: brand
          schema:
            type: string
          description: Filter by brand ID
        - in: query
          name: department
          schema:
            type: string
          description: Filter by department value (products where department array contains this value)
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductResponse"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brand-owners/me/products:
    get:
      summary: Retrieve all products
      tags: [Brand Owners]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination, default is 1, page size is 10
        - in: query
          name: category
          schema:
            type: string
          description: Filter by product category
        - in: query
          name: department
          schema:
            type: string
          description: Filter by department value (products where department array contains this value)
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductResponse"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new product
      tags: [Brand Owners]
      requestBody:
        description: You can only subbmit (name, category, description, material)
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/ProductResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      summary: Get a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: A product object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/ProductResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brand-owners/me/products/{id}:
    get:
      summary: Get a product by ID
      tags: [Brand Owners]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: A product object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/ProductResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a product
      tags: [Brand Owners]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        description: You can submit any field to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a product
      tags: [Brand Owners]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brand-owners/me/products/{productId}/variants:
    post:
      summary: Add a variant to a product
      tags: [Brand Owners]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariantRequest"
      responses:
        201:
          description: Product variant added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/ProductVariantEmbedded"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{productId}/variants/{variantId}:
    get:
      summary: Get a specific product variant
      tags: [Products]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
        - in: path
          name: variantId
          required: true
          schema:
            type: string
          description: Variant ID
      responses:
        200:
          description: A product variant object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/ProductVariantEmbedded"
        404:
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /brand-owners/me/products/{productId}/variants/{variantId}:
    get:
      summary: Get a specific product variant
      tags: [Brand Owners]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
        - in: path
          name: variantId
          required: true
          schema:
            type: string
          description: Variant ID
      responses:
        200:
          description: A product variant object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/ProductVariantEmbedded"
        404:
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a specific product variant
      tags: [Brand Owners]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
        - in: path
          name: variantId
          required: true
          schema:
            type: string
          description: Variant ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductVariantRequest"
      responses:
        200:
          description: Product variant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/ProductVariantEmbedded"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a specific product variant
      tags: [Brand Owners]
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
        - in: path
          name: variantId
          required: true
          schema:
            type: string
          description: Variant ID
      responses:
        200:
          description: Product variant deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/categories:
    get:
      summary: Get all supported product categories
      tags: [Products]
      description: Returns all available product categories supported by the system for use in filters and product creation.
      responses:
        200:
          description: A list of all supported product categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
