components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT Bearer token
  schemas:
    OrderResponse:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated id of the order
        customer:
          type: object
          properties:
            id:
              type: string
              description: Customer reference ID
            path:
              type: string
              description: Firestore reference path to the customer
        customerId:
          type: string
          description: ID of the customer (denormalized for authorization)
        dateCreated:
          type: string
          format: date-time
          description: Order creation timestamp
        status:
          type: string
          description: Current status of the order
        address:
          $ref: '#/components/schemas/Address'
          description: Shipping address
        phoneNumber:
          type: string
          description: Contact phone number
        pointsRedeemed:
          type: number
          description: Loyalty points redeemed for this order
        price:
          type: number
          description: Total order price
        productVariant:
          type: object
          properties:
            id:
              type: string
              description: Product variant reference ID
            path:
              type: string
              description: Firestore reference path to the product variant
        quantity:
          type: number
          description: Order quantity
        payment:
          $ref: '#/components/schemas/Payment'
          description: Payment details
        shipment:
          $ref: '#/components/schemas/Shipment'
          description: Shipment details

    OrderRequest:
      type: object
      required:
        - address
        - phoneNumber
        - productVariantId
        - quantity
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: Shipping address
        phoneNumber:
          type: string
          description: Contact phone number
        pointsRedeemed:
          type: number
          description: Loyalty points to redeem
        productVariantId:
          type: string
          description: ID of the product variant
        quantity:
          type: number
          description: Quantity to order
        payment:
          $ref: '#/components/schemas/PaymentRequest'
          description: Payment details
        shipment:
          $ref: '#/components/schemas/ShipmentRequest'
          description: Shipment details

    Address:
      type: object
      properties:
        building:
          type: number
          description: Building number
        city:
          type: string
          description: City name
        postalCode:
          type: number
          description: Postal code
        street:
          type: string
          description: Street name

    Payment:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          description: Payment date
        method:
          type: string
          description: Payment method used
        price:
          type: number
          description: Payment amount

    PaymentRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          description: Payment method to use

    Shipment:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          description: Shipment creation date
        dateDelivery:
          type: string
          format: date-time
          description: Expected or actual delivery date
        fees:
          type: number
          description: Shipping fees
        method:
          type: string
          description: Shipping method

    ShipmentRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          description: Shipping method to use

    OrderStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: New status for the order
        dateDelivery:
          type: string
          format: date-time
          description: Updated delivery date (if applicable)

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

# Defining Paths
paths:
  /orders:
    get:
      summary: Retrieve all orders (admin/staff only)
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            description: Filter orders by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter orders created after this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter orders created before this date
      responses:
        200:
          description: A list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new order
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: Pass this to use admin access over the userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}:
    get:
      summary: Get an order by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an order
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        200:
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an order (admin only)
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        200:
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}/status:
    patch:
      summary: Update an order's status (admin/staff only)
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        200:
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/by-customer:
    get:
      summary: Get orders by authenticated customer
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of customer's orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'